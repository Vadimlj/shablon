//Шрифты
$georgia: Georgia, Cambria, "Times New Roman", Times, serif;
$times:"Times New Roman", Times, serif;
$verdana: Verdana, Geneva, sans-serif;
$arial: Arial, Helvetica, sans-serif;
$tahoma: Tahoma, Geneva, sans-serif;
$trebuchet: 'Trebuchet MS', Arial, Helvetica, sans-serif;
$cuprum: CuprumRegular, Tahoma, Geneva, sans-serif;
$comic:" Comic Sans MS", cursive;


@mixin reset_list ($p:0, $m:0) {
    margin: $m;
    padding: $p;
    list-style: none;
    list-style-image: none;
}    

@mixin input {
    input[type="text"],
    input[type="email"],
    input[type="password"],
    input[type="number"],
    input[type="tel"],
    input[type="url"],
    input[type="search"]{ @content; } 
}

@mixin rotate_mix ( $degrees ) {
    -webkit-transform: rotate(#{$degrees}deg);
    -moz-transform: rotate(#{$degrees}deg);
    -ms-transform: rotate(#{$degrees}deg);
    -o-transform: rotate(#{$degrees}deg);
    transform: rotate(#{$degrees}deg);
    filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
    -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
    zoom: 1;
}

@mixin placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; } 
}

@mixin in_bl($v_pos) {
    display:inline-block;
    vertical-align:$v_pos;
}

@mixin br_figure ($col:#000, $v:top, $w:8px, $h:8px) {
    width: 0;
    height: 0;
    @if $v == left {
        border-right: $w solid $col;
        border-top: $h solid transparent;
        border-bottom: $h solid transparent;
    }
    @if $v == right {
        border-left: $w solid $col;
        border-top: $h solid transparent;
        border-bottom: $h solid transparent;
    }
    @if $v == top {
        border-bottom: $w solid $col;
        border-left: $h solid transparent;
        border-right: $h solid transparent;
    }
    @if $v == bottom {
        border-top: $w solid $col;
        border-left: $h solid transparent;
        border-right: $h solid transparent;
    }
    @if $v == topleft {
        border-top: $w solid $col; 
        border-right: $h solid transparent;
    }
    @if $v == topright {
        border-top: $w solid $col; 
        border-left: $h solid transparent;
    }
    @if $v == bottomleft {
        border-bottom: $w solid $col; 
        border-right: $h solid transparent;
    }
    @if $v == bottomright {
        border-bottom: $w solid $col; 
        border-left: $h solid transparent;
    }
}

// Длинная тень

@mixin shade($type, $color: #3498db, $depth: 20, $angle: 135deg, $long: false, $fade: false) {             
    $angle: ($angle - 90);             
    $x: 1.5 * cos($angle) + 0px;  
    $y: 1.5 * sin($angle) + 0px;  
    $darken: (lightness($color)/$depth)/2;
    $opacify: 0; 
    $shadow: ();  

    @if $long == true{              
        $darken:0;
    }  

    @if $fade == true {
      $opacify: (opacity($color)/$depth) ;
      @include translateZ(0); 
    }

    @for $i from 1 through $depth {
        $shadow: $shadow, $i*$x $i*$y 0 hsla(hue($color) , saturation($color), (lightness($color) - ($i * $darken)), 1 - ($i * $opacify));     
    }       
    #{$type}-shadow: $shadow;
}

// Градиент с PIE.HTC

$experimental-support-for-pie: true;

@function deprecated-webkit-gradient($type, $deprecated-pos1, $deprecated-pos2, $full) {
    $gradient-list: ();
    $gradient: false;
    $full-length: length($full);
    $percentage: false;
    $gradient-type: $type;

    @for $i from 1 through $full-length {
        $gradient: nth($full, $i);

        @if length($gradient) == 2 {
            $color-stop: color-stop(nth($gradient, 2), nth($gradient, 1));
            $gradient-list: join($gradient-list, $color-stop, comma);
        }

        @else if $gradient != null {
            @if $i == $full-length {
                $percentage: 100%;
            }

            @else {
                $percentage: ($i - 1) * (100 / ($full-length - 1)) + "%";
            }

            $color-stop: color-stop(unquote($percentage), $gradient);
            $gradient-list: join($gradient-list, $color-stop, comma);
        }
    }

    @if $type == linear {
        $gradient: -webkit-gradient(linear, $deprecated-pos1, $deprecated-pos2, $gradient-list);
    }

    @return $gradient;
}

@function _linear-positions-parser($pos) {
    $type: type-of(nth($pos, 1));
    $spec: null;
    $degree: null;
    $side: null;
    $corner: null;
    $length: length($pos);
    // Parse Side and corner positions
    @if ($length > 1) {
        @if nth($pos, 1) == "to" { // Newer syntax
            $side: nth($pos, 2);

            @if $length == 2 { // eg. to top
            // Swap for backwards compatability
                $degree: _position-flipper(nth($pos, 2));
            }
            @else if $length == 3 { // eg. to top left
                $corner: nth($pos, 3);
            }
        }
        @else if $length == 2 { // Older syntax ("top left")
            $side: _position-flipper(nth($pos, 1));
            $corner: _position-flipper(nth($pos, 2));
        }

        @if ("#{$side} #{$corner}" == "left top") or ("#{$side} #{$corner}" == "top left") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}" == "right top") or ("#{$side} #{$corner}" == "top right") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}" == "right bottom") or ("#{$side} #{$corner}" == "bottom right") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}" == "left bottom") or ("#{$side} #{$corner}" == "bottom left") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        $spec: to $side $corner;
    }
    @else if $length == 1 {
    // Swap for backwards compatability
        @if $type == string {
            $degree: $pos;
            $spec: to _position-flipper($pos);
        }
        @else {
            $degree: -270 - $pos; //rotate the gradient opposite from spec
            $spec: $pos;
        }
    }
    $degree: unquote($degree + ",");
    $spec:   unquote($spec + ",");
    @return $degree $spec;
}

@function _position-flipper($pos) {
    @return if($pos == left, right, null)
    if($pos == right, left, null)
    if($pos == top, bottom, null)
    if($pos == bottom, top, null);
}

@mixin linear-gradient($pos, $G1, $G2: null, $G3: null, $G4: null, $G5: null, $G6: null, $G7: null, $G8: null, $G9: null, $G10: null, $color: $G1, $ie_fix: pie) {
    // Detect what type of value exists in $pos
    $pos-type: type-of(nth($pos, 1));
    $pos-spec: null;
    $pos-degree: null;

    // If $pos is missing from mixin, reassign vars and add default position
    @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
        $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
        $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
        $pos: null;
    }

    @if $pos {
        $positions: _linear-positions-parser($pos);
        $pos-degree: nth($positions, 1);
        $pos-spec:   nth($positions, 2);
    }

    $full: $G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10;

    // If $fallback is a color use that color as the fallback color
    $fallback-color: false;
    @if (type-of($color) == color) or ($color == "transparent") {
        $fallback-color: $color;
    }

    $old_webkit: true;
    $ie_type: false;

    @if type-of(nth($pos, 1)) != string {
        $old_webkit: false;
        $ie_type: false;
    }

    $deprecated-pos1: false;
    $deprecated-pos2: false;
    $ie_filter_dir:false;
    $ie_st:false;
    $ie_sp:false;
    $support-for-original-webkit-gradients:true;
    $legacy-support-for-ie8:true;
    $legacy-support-for-ie:true;

    @if ($old_webkit and $support-for-original-webkit-gradients) or (($ie_fix == filter) and $legacy-support-for-ie8) {
        
        @if $pos-spec == "to bottom," {
            $deprecated-pos1: unquote("left top");
            $deprecated-pos2: unquote("left bottom");
            $ie_type: 0;
            $ie_filter_dir: normal;
        }
        @else if $pos-spec == "to top," {
            $deprecated-pos1: unquote("left bottom");
            $deprecated-pos2: unquote("left top");
            $ie_type: 0;
            $ie_filter_dir: reverse;
        }
        @else if $pos-spec == "to right," {
            $deprecated-pos1: unquote("left top");
            $deprecated-pos2: unquote("right top");
            $ie_type: 1;
            $ie_filter_dir: normal;
        }
        @else if $pos-spec == "to left," {
            $deprecated-pos1: unquote("right top");
            $deprecated-pos2: unquote("left top");
            $ie_type: 1;
            $ie_filter_dir: reverse;
        }
        @else if $pos-spec == "to top left," {
            $deprecated-pos1: unquote("right bottom");
            $deprecated-pos2: unquote("left top");
        }
        @else if $pos-spec == "to top right," {
            $deprecated-pos1: unquote("left bottom");
            $deprecated-pos2: unquote("right top");
        }
        @else if $pos-spec == "to bottom left," {
            $deprecated-pos1: unquote("right top");
            $deprecated-pos2: unquote("left bottom");
        }
        @else if $pos-spec == "to bottom right," {
            $deprecated-pos1: unquote("left top");
            $deprecated-pos2: unquote("right bottom");
        }
    }

    @if $color != false {
        background-color: nth($color, 1);  
    }

    @if $old_webkit and $support-for-original-webkit-gradients and $deprecated-pos1 and $deprecated-pos2 {background-image: deprecated-webkit-gradient(linear, $deprecated-pos1, $deprecated-pos2, $full);}
    @if $experimental-support-for-opera {background-image: -o-linear-gradient($pos-degree $full);}
    @if $experimental-support-for-mozilla {background-image: -moz-linear-gradient($pos-degree $full);}
    @if $experimental-support-for-webkit {background-image: -webkit-linear-gradient($pos-degree $full);}
    @if $experimental-support-for-microsoft {background-image: -ms-linear-gradient($pos-degree $full);}
    background-image: unquote("linear-gradient(#{$pos-spec} #{$full})");
    @if $ie_fix == pie and $legacy-support-for-ie and $experimental-support-for-pie {
        -pie-background: unquote("linear-gradient(#{$pos-spec} #{$full})");
    }
    @if ($ie_fix == filter) and $legacy-support-for-ie8 and $ie_type and $ie_filter_dir and (nth($full, 3) == null) {
        @if $ie_filter_dir == normal {
            $ie_st: ie-hex-str(nth(nth($full, 1), 1));
            $ie_sp: ie-hex-str(nth(nth($full, 2), 1));
        }
        @else if $ie_filter_dir == reverse {
            $ie_st: ie-hex-str(nth(nth($full, 2), 1));
            $ie_sp: ie-hex-str(nth(nth($full, 1), 1));
        }
        -ms-filter: "progid:DXImageTransform.Microsoft.Gradient(GradientType=#{$ie_type}, StartColorStr='#{$ie_st}', EndColorStr='#{$ie_sp}')";
    }
}

@mixin reset-gradient($color: none, $ie_fix: $fix) {
    background-image: none;
    @if $ie_fix == pie and $legacy-support-for-ie and $experimental-support-for-pie {
        -pie-background: $color;
    }
    @else if ($ie_fix == filter) and $legacy-support-for-ie8 {
        -ms-filter: "progid:DXImageTransform.Microsoft.Gradient(enabled=false)";
    }
}





    